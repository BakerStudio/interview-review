{"question":"What does * { box-sizing: border-box; } do? What are its advantages?","answer":"The CSS3 box-sizing property allows the padding and border sizes to be included in an elements total width and height. It simplifies accurate layout.","category":"CSS","qsource":"https://github.com/h5bp/Front-end-Developer-Interview-Questions","asource":"https://www.w3schools.com/css/css3_box-sizing.asp","rating":"beginner"}

{"question":"What did you learn yesterday/this week?","answer":"You should be learning something new every day. ABL = Always Be Learning.","category":"General","qsource":"https://github.com/h5bp/Front-end-Developer-Interview-Questions","asource":"Bill Baker","rating":"beginner"}

{"question":"What is a typical use case for anonymous functions?","answer":"Anonymous functions aren’t given a name in the same way as normal functions. Not having to set a name for an anonymous function is a convenience. They are typically used as callback functions in NodeJS servers.",
"category":"JS",
"rating":"beginner"}

{"question":"What is the difference between full standards mode, almost standards mode and quirks mode?","answer":"Full standards mode follows the W3C HTML and CSS specifications while quirks mode allows variation from the standards to fit legacy browser versions. Almost standards mode allows a fewer number of variations from the standards.","category":"HTML","qsource":"https://github.com/h5bp/Front-end-Developer-Interview-Questions","asource":"http://study-for-exam.blogspot.com/2016/01/whats-difference-between-standards-mode.html","rating":"beginner"}

{"question": "Value vs. Reference",
"answer": "Understand how objects, arrays, and functions are copied and passed into functions. Know that the reference is what's being copied. Understand that primitives are copied and passed by copying the value.",
"category": "Concepts",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5685265389584384",
"rating": "beginner"}

{"question": "Define 'Scope'",
"answer": "Understand the difference between global scope, function scope, and block scope. Understand which variables are available where. Know how the JavaScript engine performs a variable lookup.",
"category": "Concepts",
"asource": "https://scotch.io/tutorials/understanding-scope-in-javascript#toc-scope-in-javascript",
"rating": "beginner"}

{"question": "What is hoisting?",
 "answer": "Understand that variable and function declarations are hoisted to the top of their available scope. Understand that function expressions are not hoisted.",
 "category": "Concepts",
 "asource": "http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/",
 "rating": "beginner"}

{"question": "Closures",
"answer": "Know that a function retains access to the scope that it was created in. Know what this lets us do, such as data hiding, memoization, and dynamic function generation.",
"category": "Concepts",
"asource": "http://javascriptissexy.com/understand-javascript-closures-with-ease/",
"rating": "beginner"}

{"question": "What is the signifance of 'this'?",
"answer": "Know the rules of this binding. Know how it works, know how to figure out what it will be equal to in a function, and know why it’s useful.",
"category": "Concepts",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5676830073815040",
"rating": "beginner"}

{"question": "What does 'new' signify?",
"answer": "Know how it relates to object oriented programming. Know what happens to a function called with new. Understand how the object generated by using new inherits from the function’s prototype property.",
"category": "Concepts",
"asource": "https://codeburst.io/javascripts-new-keyword-explained-as-simply-as-possible-fec0d87b2741",
"rating": "beginner"}

{"question": "'apply', 'call', 'bind'",
"answer": "Know how each of these functions work. Know how to use them. Know what they do to this.",
"category": "Concepts",
"asource": "https://codeplanet.io/javascript-apply-vs-call-vs-bind/",
"rating": "beginner"}

{"question": "Prototypes & Inheritance",
"answer": "Understand that inheritance in JavaScript works through the [[Prototype]] chain. Understand how to set up inheritance through functions and objects and how new helps us implement it. Know what the __proto__ and prototype properties are and what they do.",
"category": "Concepts",
"asource": "https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e",
"rating": "beginner"}

{"question": "Asynchronous JS",
"answer": "Understand the event loop. Understand how the browser deals with user input, web requests, and events in general. Know how to recognize and correctly implement asynchronous code. Understand how JavaScript is both asynchronous and single-threaded.",
"category": "Concepts",
"asource": "https://www.youtube.com/watch?v=8aGhZQkoFbQ&t=948s",
"rating": "beginner"}

{"question": "Higher Order Functions",
"answer": "Understand that functions are first-class objects in JavaScript and what that means. Know that returning a function from another function is perfectly legal. Understand the techniques that closures and higher order functions allow us to use.",
"category": "Concepts",
"asource": "https://www.sitepoint.com/higher-order-functions-javascript/",
"rating": "beginner"}

{"question": "What is an Object?",
"answer": "An object is an unordered list of primitive data types (and sometimes reference data types) that is stored as a series of name-value pairs. Each item in the list is called a property (functions are called methods).",
"category": "General",
"asource": "http://javascriptissexy.com/javascript-objects-in-detail/",
"rating": ""}

{"question": "Inheritance and Encapsulation (Object-oriented programming)",
"answer": "Encapsulation refers to enclosing all the functionalities of an object within that object so that the object’s internal workings (its methods and properties) are hidden from the rest of the application. This allows us to abstract or localize specific set of functionalities on objects. Inheritance refers to an object being able to inherit methods and properties from a parent object (a Class in other OOP languages, or a Function in JavaScript).",
"category": "JS",
"asource": "http://javascriptissexy.com/oop-in-javascript-what-you-need-to-know/",
"rating": "intermediate"}

{"question": "What are callbacks?",
"answer": "Callbacks are functions that are passed to other functions as parameters. They're necessary for asynchronous code, encapsulation, eliminating code repetition, and so much more. The fact that functions are first-class objects in JavaScript is part of what makes the language so powerful.",
"category": "JS",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5661458385862656/preview",
"rating": "beginner"}

{"question": "What does the 'map' array function do?",
"answer": "'Map' transform one array into another by performing some operation on each of its values. The original array is left untouched and the function returns a reference to a new array.",
"category": "JS",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5766466041282560",
"rating": "beginner"}

{"question": "What does the 'filter' array function do?",
"answer": "The 'filter' array function filters existing values for an array, without having to use additional functions.",
"category": "JS",
"rating": "beginner"}

{"question": "What is the difference between async and sync functions?",
"answer": "Async stands for asynchronous and it is (aptly) the opposite of synchronous programming.JavaScript is an event-driven language.An async function in JavaScript returns a promise or a promise-chain that will be resolved at a later time--execution doesn't pause until the resolution.",
"category": "NodeJS",
"rating": "advanced"}

{"question": "What is JSON?",
"answer": "JavaScript Object Notation (JSON) is an open-standard file format that uses human-readable text to transmit data objects consisting of attribute–value pairs and array data types (or any other serializable value).  Is light-weight and language-independent. ",
"category": "JS",
"rating": "intermediate"}

{"question": "What are 'properties'?",
"answer": "Property: JavaScript is designed on a simple object-based paradigm. An object is a collection of properties, and a property is an association between a name (or key) and a value. A property's value can be a function, in which case the property is known as a method.<br><br>A JavaScript object is a set of key/value pairs. Each pair is called a 'property'.",
"category": "JS",
"rating": "intermediate"}

{"question": "What is 'middleware'?",
"answer": "Middleware is an approach to server-side web development is that it encourages us to write modular, reusable, functional code. Middleware is the code that sits between the request handler and the response (or next).<br><br>Crucially, all middleware functions must do one of two things: either return a response or call next().",
"category": "NodeJS",
"rating": "intermediate"}

{"question": "What is 'REST API'?",
"answer": "REST = REpresentational State Transfer. An architectural design for web services and web APIs.The REST design does not require a specific format for the data provided with the requests. In general data is provided in the request body as a JSON blob, or sometimes as arguments in the query string portion of the URL.<br>API = application program interface. a set of Hypertext Transfer Protocol (HTTP) request messages, along with a definition of the structure of response messages, which is usually in an Extensible Markup Language (XML) or JavaScript Object Notation (JSON) format.",
"category": "NodeJS",
"rating": "intermediate"}

{"question": "What is a SQL database?",
"answer": "SQL = structured query language, is the language used to manage relational databases. Runs in cross-platform systems and is strongly typed. Record based with rows and columns in tables. Examples include Oracle DB, MySQL, MariaDB, IBM DB2, PostGRE.",
"category": "DB",
"rating": "intermediate"}

{"question": "What is a non-SQL database?",
"answer": "Non-SQL databases use data structures such as key-value or documents that are more suitable to 'big data' and real-time web applications. Compared to relational databases, for example, collections could be considered analogous to tables and documents analogous to records. But they are different: every record in a table has the same sequence of fields, while documents in a collection may have fields that are completely different. Example is MongoDB, which uses JS for access.",
"category": "DB",
"rating": "beginner"}

{"question": "Can you tell me about a recent project or process that you made better, faster, smarter or more efficient?",
"answer": "Describe a project from your personal experience that pertains to this question.",
"category": "General",
"rating": "beginner"}

{"question": "You’ve just been assigned to a project involving a new technology. How would you get started?",
"answer": "Describe what sources you would draw upon to learn the new tech.",
"category": "General",
"rating": "beginner"}

{"question": "What technology-related blogs, podcasts, tweets or websites do you follow?",
"answer": "Blogs, podcasts, twitter users, Facebook groups, meet-ups, books, etc.",
"category": "General",
"rating": "beginner"}

{"question": "How do you keep your technology skills current?",
"answer": "personal experience",
"category": "General",
"rating": "beginner"}

{"question": "What three character traits would your friends use to describe you?",
"answer": "personal traits",
"category": "General",
"rating": "beginner"}

{"question": "Can you tell me about a time when things didn’t go the way you wanted at work, such as a project that failed or being passed over for a promotion?",
"answer": "personal experience",
"category": "General",
"rating": "beginner"}

{"question": "What are your favorite and least favorite technology products, and why?",
"answer": "Everyone hates Microsoft Powerpoints!<br>Hint: dont say 'Notepad'.",
"category": "General",
"rating": "beginner"}

{"question": "What is a cucumber?",
"answer": "It is like a pickle.",
"category": "Random Category",
"rating": "beginner"}

{"question": "What is a raisin?",
"answer": "It is like a grape.",
"category": "Random Category",
"rating": "beginner"}

{"question": "What is CORS? How does it work?",
"answer": "Cross-origin resource sharing (CORS) is a mechanism that allows many resources (e.g., fonts, JavaScript, etc.) on a web page to be requested from another domain outside the domain from which the resource originated. It’s a mechanism supported in HTML5 that manages XMLHttpRequest access to a domain different.<br>CORS adds new HTTP headers that provide access to permitted origin domains. For HTTP methods other than GET (or POST with certain MIME types), the specification mandates that browsers first use an HTTP OPTIONS request header to solicit a list of supported (and available) methods from the server. The actual request can then be submitted. Servers can also notify clients whether “credentials” (including Cookies and HTTP Authentication data) should be sent with requests.<br>Alternative and shorter answer:<br>Cross-Origin Resource Sharing is a mechanism that enables many resources (e.g., JavaScript, fonts etc.) on a web page to be requested from another domain outside the domain from which the resource originated. It is a mechanism supported in HTML5 that manages XMLHttpRequest access to a domain different.",
"category": "JS",
"rating": "advanced"}

{"question": "Explain the purpose of three HTTP request types when used with a RESTful web service.",
"answer": "The purpose of each of the HTTP request types when used with a RESTful web service is as follows:<ul><li>GET: Retrieves data from the server (should only retrieve data and should have no other effect).</li><li>POST: Sends data to the server for a new entity. It is often used when uploading a file or submitting a completed web form.</li><li>PUT: Similar to POST, but used to replace an existing entity.</li><li>PATCH: Similar to PUT, but used to update only certain fields within an existing entity.</li><li>DELETE: Removes data from the server.</li><li>TRACE: Provides a means to test what a machine along the network path receives when a request is made. As such, it simply returns what was sent.</li><li>OPTIONS: Allows a client to request information about the request methods supported by a service. The relevant response header is Allow and it simply lists the supported methods. (It can also be used to request information about the request methods supported for the server where the service resides by using a * wildcard in the URI.)</li><li>HEAD: Same as the GET method for a resource, but returns only the response headers (i.e., with no entity-body).</li><li>CONNECT: Primarily used to establish a network connection to a resource (usually via some proxy that can be requested to forward an HTTP request as TCP and maintain the connection). Once established, the response sends a 200 status code and a “Connection Established” message.</li></ul>",
"category": "NodeJS",
"rating": "advanced"}

{"question": "What is long polling, how does it work, and why would you use it? Considering server and client resources, what is the main drawback of using long polling? Which HTML5 feature is the best alternative to long polling?",
"answer": "The HTTP protocol is based on a request/response pattern, which means that the server cannot push any data to the client (i.e., the server can only provide data to the client in response to a client request). Long polling is a web application development pattern used to emulate pushing data from server to client. When the long polling pattern is used, the client submits a request to the server and the connection then remains active until the server is ready to send data to the client. The connection is closed only after data is sent back to the client or connection timeout occurs. The client then creates a new request when the connection is closed, thus restarting the loop.<br><br>There are two important drawbacks that need to be considered when using long polling:<br><br>Long polling requests are not different from any other HTTP request and web servers handle them the same way. This means that every long poll connection will reserve server resources, potentially maxing out the number of connections the server can handle. This can lead to HTTP connection timeouts.<br><br>Each web browser will limit the maximum number of connections web application can make. This means that your application load time and performance may be degraded.<br><br>In HTML5, a useful alternative to long polling is using a WebSocket. A WebSocket is a protocol providing full-duplex communications channels over a single TCP connection. The WebSocket protocol makes possible more interaction between a browser and a web site, facilitating live content and eliminates the need for the long polling paradigm.<br><br>Another potential answer could be Server-sent DOM Events. Which is method of continuously sending data from a server to the browser, rather than repeatedly requesting it. However, this HTML5 feature is not supported by Microsoft Internet Explorer, thus making it less attractive solution.<br><br>Alternative and shorter answer:<br><br>Long polling is a web application development pattern used to emulate pushing data from the server to the client.  When the long polling is used, the client sends a request to the server, and the connection remains intact until the server is ready to send data to the client. The connection will be closed only after the data is sent back to the client or connection timeout occurs.",
"category": "NodeJS",
"rating": "advanced"}

{"question": "Explain the difference between stateless and stateful protocols. Which type of protocol is HTTP?",
"answer": "A stateless communications protocol treats each request as an independent transaction. It therefore does not require the server to retain any session, identity, or status information spanning multiple requests from the same source. Similarly, the requestor can not rely on any such information being retained by the responder.<br>In contrast, a stateful communications protocol is one in which the responder maintains “state” information (session data, identity, status, etc.) across multiple requests from the same source.<br>HTTP is a stateless protocol. HTTP does not require server to retain information or status about each user for the duration of multiple requests.<br>Some web servers implement states using different methods (using cookies, custom headers, hidden form fields etc.). However, in the very core of every web application everything relies on HTTP which is still a stateless protocol that is based on simple request/response paradigm.",
"category": "NodeJS",
"rating": "advanced"}

{"question": "Describe the key advantages of HTTP/2 as compared with HTTP 1.1.",
"answer": "HTTP/2 provides decreased latency to improve page load speed by supporting:<ul><li>Data compression of HTTP headers</li><li>Server push technologies</li><li>Loading of page elements in parallel over a single TCP connection</li><li>Prioritization of requests</li></ul><br>An important operational benefit of HTTP/2 is that it avoids the head-of-line blocking problem in HTTP 1.",
"category": "NodeJS",
"rating": "advanced"}

{"question": "What is a “MIME type”, what does it consist of, and what is it used for? Provide an example.",
"answer": "MIME is an acronym for Multi-purpose Internet Mail Extensions. It is used as a standard way of classifying file types over the Internet.<br><br>Web servers and browsers have a defined list of MIME types, which facilitates transfer of files of a known type, irrespective of operating system or browser.<br><br>A MIME type actually has two parts: a type and a subtype that are separated by a slash (/). For example, the MIME type for Microsoft Word files is application/msword (i.e., type is application and the subtype is msword).",
"category": "HTML",
"rating": "intermediate"}

{"question": "Explain what is an ETag and how does it work?",
"answer": "An ETag is an opaque identifier allocated by a web server to a specific version of a resource found at a URL.  The ETag is a part of HTTP, the protocol for the world wide web and when the server reads the ETag from client request, the server can then tell whether to send the file (HTTP 200) or tell the client just to use their local copy (HTTP 304).",
"category": "NodeJS",
"rating": "intermediate"}

{"question": "What is the correct way to include JavaScript into your HTML?",
"answer": "The correct way to include JavaScript into your HTML is by using inline event handlers or inline code.",
"category": "JS",
"rating": "beginner"}

{"question": "Using CSS, how can you make a form element’s background color change when the user is entering text? Does this work in all browsers?",
"answer": "You can change the default look of form elements by styling their HTML tags: input, select and textarea but it won’t work for all browsers.",
"category": "CSS",
"rating": "beginner"}

{"question": "In HTML what tag can be used for a multi-line text input control?",
"answer": "For multi-line text input control, you can use the 'textarea tag'.",
"category": "HTML",
"rating": "beginner"}

{"question": "What are a few few ways to reduce page load time?",
"answer": "Reduce image size<br>Remove unnecessary widgets<br>HTTP compression<br>Placing CSS at the top and script reference at the bottom or in external files<br>Reduce lookups<br>Minimize redirects<br>Caching",
"category": "JS",
"rating": "intermediate"}

{"question": "What is a pseudo-element?",
"answer": "Pseudo-elements are used to add special effects to some selectors.  CSS in used to apply styles in HTML mark-up. In some cases when extra mark-up or styling is not possible for the document, then there is a feature available in CSS known as pseudo-elements. It will allow extra mark-up to the document without disturbing the actual document.",
"category": "CSS",
"rating": "beginner"}

{"question": "How can you overrule underlining hyperlinks?",
"answer": "Control statements and external style sheets are used to overrule underlining hyperlinks with the 'text-decoration' property.",
"category": "CSS",
"rating": "beginner"}

{"question": "What is CSS Box Model and what are its elements?",
"answer": "This box defines design and layout of elements of CSS. The elements are:<p>Margin: the top most layer, the overall structure is shown</p><p>Border: the padding and content option with a border around it is shown.  Background color affects the border.</p><p>Padding: Space is shown. Background color affects the border.</p><p>Content: Actual content is shown.</p>",
"category": "CSS",
"rating": "beginner"}

{"question": "What is CSS inline style?",
"answer": "The Inline style in a CSS is used to add up styling to individual HTML elements.",
"category": "CSS",
"rating": "beginner"}

{"question": "Define CSS property?",
"answer": "A style that helps in influencing CSS. Example: FONT. They have corresponding values or properties within them, like FONT has different style like bold, italic, etc.",
"category": "CSS",
"rating": "beginner"}

{"question": "What is 'callback hell' and how can it be avoided?",
"answer": "'Callback hell' refers to heavily nested callbacks that have become unweildy or unreadable.<br>The primary method to fix callback hell is usually referred to as modularization. The callbacks are broken out into independent functions which can be called with some parameters.<br>In some cases it may be appropriate to use a more robust solution in the form of promises. Promises allow additional desirable behavior such as error propagation and chaining. Node.js doesn’t include much core support for promises, so one of the popular promise libraries should be used.<br>Additionally, a more supercharged solution to callback hell is provided by generators, as these can resolve execution dependency between different callbacks. However, generators are much more advanced and it might be overkill to use them for this purpose.",
"category": "NodeJS",
"rating": "intermediate"}

{"question": "How does Node.js handle child threads?",
"answer": "Node.js, in its essence, is a single thread process. It does not expose child threads and thread management methods to the developer. Technically, Node.js does spawn child threads for certain tasks such as asynchronous I/O, but these run behind the scenes and do not execute any application JavaScript code, nor block the main event loop.<br>If threading support is desired in a Node.js application, there are tools available to enable it, such as the ChildProcess module.",
"category": "NodeJS",
"rating": "guru-level"}

{"question": "How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?",
"answer": "Since Node.js is by default a single thread application, it will run on a single processor core and will not take full advantage of multiple core resources. However, Node.js provides support for deployment on multiple-core systems, to take greater advantage of the hardware. The Cluster module is one of the core Node.js modules and it allows running multiple Node.js worker processes that will share the same port.",
"category": "NodeJS",
"rating": "advanced"}

{"question": "What is typically the first argument passed to a Node.js callback handler?",
"answer": "Node.js core modules, as well as most of the community-published ones, follow a pattern whereby the first argument to any callback handler is an optional error object. If there is no error, the argument will be null or undefined.",
"category": "NodeJS",
"rating": "beginner"}

{"question": "What is the event loop?",
"answer": "Node.js runs using a single thread, at least from a Node.js developer's point of view. Under the hood Node.js uses many threads through libuv. Every I/O requires a callback - once they are done they are pushed onto the event loop for execution",
"category": "NodeJS",
"rating": "beginner"}

{"question": "What tools can be used to assure consistent code style?",
"answer": "Linters, either as plug-ins in the editor/IDE or as standalone programs. Example linters include:<ul><li>JSLint</li><li>JSHint</li><li>ESLint</li></ul>",
"category": "NodeJS",
"rating": "beginner"}

{"question": "What is a test pyramid? How can you implement it when talking about HTTP APIs?",
"answer": "A test pyramid describes that when writings test cases there should be a lot more low-level unit tests than high level end-to-end tests.<br><br>When talking about HTTP APIs, it may come down to this:<ul><li>A lot of low-level unit tests for your models</li><li>Less integration tests, where your test how your models interact with each other</li><li>A lot less acceptance tests, where you test the actual HTTP endpoints</li></ul>",
"category": "NodeJS",
"rating": "intermediate"}
