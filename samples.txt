{"question":"What does * { box-sizing: border-box; } do? What are its advantages?","answer":"The CSS3 box-sizing property allows the padding and border sizes to be included in an elements total width and height. It simplifies accurate layout.","category":"CSS","qsource":"https://github.com/h5bp/Front-end-Developer-Interview-Questions","asource":"https://www.w3schools.com/css/css3_box-sizing.asp","rating":"beginner"}

{"question":"What did you learn yesterday/this week?","answer":"You should be learning something new every day. ABL = Always Be Learning.","category":"General","qsource":"https://github.com/h5bp/Front-end-Developer-Interview-Questions","asource":"Bill Baker","rating":"beginner"}

{"question":"What is a typical use case for anonymous functions?","answer":"Anonymous functions aren’t given a name in the same way as normal functions. Not having to set a name for an anonymous function is just a convenience.","category":"JS","qsource":"https://github.com/h5bp/Front-end-Developer-Interview-Questions","asource":"http://helephant.com/2008/08/23/javascript-anonymous-functions","rating":"beginner"}

{"question":"What is the difference between full standards mode, almost standards mode and quirks mode?","answer":"Full standards mode follows the W3C HTML and CSS specifications while quirks mode allows variation from the standards to fit historical browser versions. Almost standards mode allows a fewer number of variations from the standards.","category":"HTML","qsource":"https://github.com/h5bp/Front-end-Developer-Interview-Questions","asource":"http://study-for-exam.blogspot.com/2016/01/whats-difference-between-standards-mode.html","rating":"beginner"}

{"question": "Value vs. Reference",
"answer": "Understand how objects, arrays, and functions are copied and passed into functions. Know that the reference is what's being copied. Understand that primitives are copied and passed by copying the value.",
"category": "Concepts",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5685265389584384",
"rating": "beginner"}

{"question": "Scope",
"answer": "Understand the difference between global scope, function scope, and block scope. Understand which variables are available where. Know how the JavaScript engine performs a variable lookup.",
"category": "Concepts",
"asource": "https://scotch.io/tutorials/understanding-scope-in-javascript#toc-scope-in-javascript",
"rating": "beginner"}

{"question": "Hoisting",
 "answer": "Understand that variable and function declarations are hoisted to the top of their available scope. Understand that function expressions are not hoisted.",
 "category": "Concepts",
 "asource": "http://javascriptissexy.com/javascript-variable-scope-and-hoisting-explained/",
 "rating": "beginner"}

{"question": "Closures",
"answer": "Know that a function retains access to the scope that it was created in. Know what this lets us do, such as data hiding, memoization, and dynamic function generation.",
"category": "Concepts",
"asource": "http://javascriptissexy.com/understand-javascript-closures-with-ease/",
"rating": "beginner"}

{"question": "'this'",
"answer": "Know the rules of this binding. Know how it works, know how to figure out what it will be equal to in a function, and know why it’s useful.",
"category": "Concepts",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5676830073815040",
"rating": "beginner"}

{"question": "'new'",
"answer": "Know how it relates to object oriented programming. Know what happens to a function called with new. Understand how the object generated by using new inherits from the function’s prototype property.",
"category": "Concepts",
"asource": "https://codeburst.io/javascripts-new-keyword-explained-as-simply-as-possible-fec0d87b2741",
"rating": "beginner"}

{"question": "'apply', 'call', 'bind'",
"answer": "Know how each of these functions work. Know how to use them. Know what they do to this.",
"category": "Concepts",
"asource": "https://codeplanet.io/javascript-apply-vs-call-vs-bind/",
"rating": "beginner"}

{"question": "Prototypes & Inheritance",
"answer": "Understand that inheritance in JavaScript works through the [[Prototype]] chain. Understand how to set up inheritance through functions and objects and how new helps us implement it. Know what the __proto__ and prototype properties are and what they do.",
"category": "Concepts",
"asource": "https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e",
"rating": "beginner"}

{"question": "Asynchronous JS",
"answer": "Understand the event loop. Understand how the browser deals with user input, web requests, and events in general. Know how to recognize and correctly implement asynchronous code. Understand how JavaScript is both asynchronous and single-threaded.",
"category": "Concepts",
"asource": "https://www.youtube.com/watch?v=8aGhZQkoFbQ&t=948s",
"rating": "beginner"}

{"question": "Higher Order Functions",
"answer": "Understand that functions are first-class objects in JavaScript and what that means. Know that returning a function from another function is perfectly legal. Understand the techniques that closures and higher order functions allow us to use.",
"category": "Concepts",
"asource": "https://www.sitepoint.com/higher-order-functions-javascript/",
"rating": "beginner"}

{"question": "What is an Object?",
"answer": "An object is an unordered list of primitive data types (and sometimes reference data types) that is stored as a series of name-value pairs. Each item in the list is called a property (functions are called methods).",
"category": "General",
"asource": "http://javascriptissexy.com/javascript-objects-in-detail/",
"rating": ""}

{"question": "Inheritance and Encapsulation (Object-oriented programming)",
"answer": "Encapsulation refers to enclosing all the functionalities of an object within that object so that the object’s internal workings (its methods and properties) are hidden from the rest of the application. This allows us to abstract or localize specific set of functionalities on objects. Inheritance refers to an object being able to inherit methods and properties from a parent object (a Class in other OOP languages, or a Function in JavaScript).",
"category": "JS",
"asource": "http://javascriptissexy.com/oop-in-javascript-what-you-need-to-know/",
"rating": "intermediate"}

{"question": "What are callbacks?",
"answer": "Callbacks are functions that are passed to other functions as parameters. They're necessary for asynchronous code, encapsulation, eliminating code repetition, and so much more. The fact that functions are first-class objects in JavaScript is part of what makes the language so powerful.",
"category": "JS",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5661458385862656/preview",
"rating": "beginner"}

{"question": "What does the 'map' array function do?",
"answer": "'Map' transform one array into another by performing some operation on each of its values. The original array is left untouched and the function returns a reference to a new array.",
"category": "JS",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5766466041282560",
"rating": "beginner"}

{"question": "What does the 'filter' array function do?",
"answer": "The 'filter' array function filters existing values for an array, without having to use additional functions.",
"category": "JS",
"asource": "https://www.educative.io/collection/page/5679346740101120/5707702298738688/5766466041282560",
"rating": "beginner"}

{"question": "question blank",
"answer": "answer blank",
"category": "Blank",
"asource": "",
"rating": ""}
